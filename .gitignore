# Arquivos compilados / otimizados / DLL do Python
__pycache__/
*.py[cod]
*$py.class

# Extensões C
*.so

# Distribuição / empacotamento
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Geralmente estes arquivos são escritos por um script python a partir de um template
#  antes do PyInstaller construir o exe, para injetar data/outras informações nele.
*.manifest
*.spec

# Logs do instalador
pip-log.txt
pip-delete-this-directory.txt

# Relatórios de testes unitários / cobertura
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Traduções
*.mo
*.pot

# Arquivos do Django:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Arquivos do Flask:
instance/
.webassets-cache

# Arquivos do Scrapy:
.scrapy

# Documentação do Sphinx
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   Para uma biblioteca ou pacote, você pode querer ignorar estes arquivos já que o código é
#   destinado a rodar em múltiplos ambientes; caso contrário, inclua-os no controle de versão:
# .python-version

# pipenv
#   De acordo com pypa/pipenv#598, é recomendado incluir Pipfile.lock no controle de versão.
#   Porém, no caso de colaboração, se há dependências específicas da plataforma ou dependências
#   sem suporte multiplataforma, pipenv pode instalar dependências que não funcionam, ou não
#   instalar todas as dependências necessárias.
#Pipfile.lock

# poetry
#   Similar ao Pipfile.lock, geralmente é recomendado incluir poetry.lock no controle de versão.
#   Isso é especialmente recomendado para pacotes binários para garantir reprodutibilidade, e é mais
#   comumente ignorado para bibliotecas.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar ao Pipfile.lock, geralmente é recomendado incluir pdm.lock no controle de versão.
#pdm.lock
#   pdm armazena configurações do projeto em .pdm.toml, mas é recomendado não incluir no
#   controle de versão.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; usado por ex.: github.com/David-OConnor/pyflow e github.com/pdm-project/pdm
__pypackages__/

# Arquivos do Celery
celerybeat-schedule
celerybeat.pid

# Arquivos analisados do SageMath
*.sage.py

# Ambientes
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Configurações de projeto do Spyder
.spyderproject
.spyproject

# Configurações de projeto do Rope
.ropeproject

# Documentação do mkdocs
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Verificador de tipos Pyre
.pyre/

# Analisador de tipos estático pytype
.pytype/

# Símbolos de debug do Cython
cython_debug/

# PyCharm
#  Template específico do JetBrains é mantido em um JetBrains.gitignore separado que pode
#  ser adicionado ao gitignore global ou mesclado neste gitignore do projeto. Para um projeto
#  PyCharm, é aconselhável adicionar entradas específicas do gitignore do JetBrains e não toda
#  a pasta .idea/, pois ela contém metadados úteis do projeto.
.idea/

# VS Code
.vscode/
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
*.code-workspace

# Histórico Local para Visual Studio Code
.history/

# Extensões Construídas do Visual Studio Code
*.vsix

# Datasets e arquivos grandes
*.csv.bak
*.json.bak
*.h5
*.hdf5
*.pkl
*.pickle

# Modelos treinados
models/
*.model
*.joblib

# Logs personalizados
logs/
*.log

# Arquivos temporários
temp/
tmp/
*.tmp

# Específico para IA/ML
wandb/
mlruns/
.mlflow/

# Jupyter Lab
.jupyter/

relatorio.md